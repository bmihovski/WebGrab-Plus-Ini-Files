**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: vivacom.bg
* @MinSWversion: V1.1.1/53
* @Revision 2 - [19/12/2014] Francis De Paemeleere
*	- new index page
* @Revision 1 - [03/06/2014] Jan van Straaten
*	- completely new
* @Revision 0 - [13/02/2014] Francis De Paemeleere
*   - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
site {url=vivacom.bg|timezone=Europe/Sofia|maxdays=8|cultureinfo=bg-BG|charset=UTF-8|titlematchfactor=90|keepindexpage}

urldate.format {datestring|yyyy-MM-dd}
index_temp_1.modify { set()|'config_site_id' }
index_temp_1.modify { replace(type=regex)|"\d+([,\d]+)"}

index_variable_element.modify  { set()|'config_site_id' }
index_variable_element.modify { replace (type=regex)|"(\d+,)[\d,]+"}
index_temp_2.modify { set()|'urldate'}
index_temp_2.modify { calculate(format=date,yyyy-MM-dd)}
*global_temp_3.modify { set()|'config_site_id' }
*global_temp_3.modify { substring (type=char)|2 1}

url_index.modify { set()|http://www.vivacom.bg/bg/tv/programa/?date='index_temp_2'&page='index_temp_1'}
url_index { url() }
url_index.headers {referer=http://www.vivacom.bg/bg/tv/programa/}
url_index.headers {customheader=Accept-Encoding=gzip,deflate}
url_index.headers {customheader=X-Requested-With=XMLHttpRequest}


*index_temp_4.scrub {multi(debug includeblock='global_temp_3')|<img|src=|.png|/>}
*index_urlchannellogo.modify {set()|http://www.vivacom.bg'index_temp_4'.png}

index_showsplit.scrub {multi(debug includeblock='index_variable_element')|<ul|<li|<\/li|<\/ul}
index_start.scrub {regex()||<span>(\d\d:\d\d):\d\d\s*-||}
index_title.scrub {regex()||<h\d.*?>\s*([^<]*)\s*<||}
index_title.modify {cleanup(unidecode)}
index_title.modify {cleanup(style=lower)}
index_title.modify {cleanup(style=sentence)}
index_title.modify {remove|\}
index_description.scrub {regex||<p.*?>(.+?)<||}
index_description.modify {cleanup(unidecode)}
index_description.modify {remove|\}
*index_stop.scrub  {single|<span>| -|<|<}




* scope.range {(splitindex)|end}
* * first search the index of the channel we want to grab
* index_temp_3.modify {clear}* index of the channel
* index_temp_2.modify {clear}* index counter
* index_temp_2.modify {addend|0}
* index_temp_4.modify {clear}
* index_temp_4.modify {addend|title="'config_site_id'"}
* loop {(each 'index_temp_6' in 'index_variable_element' max=3000)|end}
* index_temp_3.modify 	{addend('index_temp_6' ~ 'index_temp_4')|'index_temp_2'}
* *index_temp_5.modify 	{addend('index_temp_6' ~ 'index_temp_4')|'index_temp_6'}  ** currently can't use this in this scope
* index_temp_2.modify 	{calculate(format=D0)|1 +}
* end_loop
* * we have the index of the channel.
* * we will now select the channels on all the index pages
* index_showsplit.modify {substring(type=element)|'index_showsplit' 'index_temp_3' 1/'index_temp_2'}
* index_showsplit.modify {substring(type=regex)|<h3>.*?</li>} * now split into different channels
* * just cleanup the logo url
* *index_temp_5.modify {substring(type=regex)|src=\"([^\"]*)\"}  ** currently can't use this in this scope
* end_scope

* index_start.scrub {single|<span>|| -|<}
* index_stop.scrub  {single|<span>| -|<|<}
* index_title.scrub {regex||<h3>\s*([^<]*)\s*</h3>||}
* index_description.scrub {regex||<p>\s*(.*?)\s*</p>||}

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*index_site_id.scrub {regex||^.*?<ol id="scroll-vertical">.*?(?:<li [^>]*title=\"([^\"]*)\"[^>]*>.*?</li>\s*)+||}		* the channel list (names)
*index_site_channel.modify {addstart|'index_site_id'}
*scope.range {(channellist)|end}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
